name: Build and Publish
permissions:
  contents: write

on:
  push:
    branches: [master]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # fetch all history for branch creation

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Make gradle wrapper executable
        run: chmod +x ./gradlew

      - name: Build mod
        run: ./gradlew build

      - name: Generate version and patch files
        run: ./gradlew generateUpdateFiles

      - name: Commit update files
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Checkout or create the update branch
          if git show-ref --verify --quiet refs/heads/auto/update-version; then
            git checkout auto/update-version
          else
            git checkout -b auto/update-version
          fi

          # Stage files
          git add version/version.json version/patch.json

          # Commit if there are changes
          if [ "$(git branch --show-current)" == "auto/update-version" ]; then
            if ! git diff --cached --quiet; then
              git commit -m "Update version and patch info for ${{ github.sha }}"
              git pull --rebase
              git push -u origin auto/update-version
            else
              echo "No changes to commit"
            fi
          else
            echo "Could not checkotu branch auto/update-version"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get build filename
        run: |
          echo "FILENAME=$(ls build/libs | awk '! /sources/ {print $1}')" >> $GITHUB_ENV
      
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: $FILENAME
          path: build/libs/$FILENAME

      - name: Create Release
        id: create_release
        run: |
          REPO_NAME=$(basename ${GITHUB_REPOSITORY})
          GITHUB_API_URL="https://api.github.com/repos/${GITHUB_REPOSITORY}/releases"
          TAG_NAME="v$(./gradlew version)"
          RESPONSE=$(curl -s -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -d "{\"tag_name\": \"$TAG_NAME\", \"name\": \"Release $TAG_NAME\"}" $GITHUB_API_URL)
          echo "Release created with tag: $TAG_NAME"
          echo "::set-output name=release_url::$(echo $RESPONSE | jq -r .upload_url)"

        
      - name: Upload release assets
        id: upload-release-assets
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.release_url }}
          asset_path: build/libs/$FILENAME
          asset_name: $FILENAME
          asset_content_type: application/octet-stream


